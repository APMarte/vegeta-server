// Code generated by go-swagger; DO NOT EDIT.

package report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "vegeta-server/models"
)

// GetReportsOKCode is the HTTP code returned for type GetReportsOK
const GetReportsOKCode int = 200

/*GetReportsOK Success

swagger:response getReportsOK
*/
type GetReportsOK struct {

	/*
	  In: Body
	*/
	Payload models.ReportResponseList `json:"body,omitempty"`
}

// NewGetReportsOK creates GetReportsOK with default headers values
func NewGetReportsOK() *GetReportsOK {

	return &GetReportsOK{}
}

// WithPayload adds the payload to the get reports o k response
func (o *GetReportsOK) WithPayload(payload models.ReportResponseList) *GetReportsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get reports o k response
func (o *GetReportsOK) SetPayload(payload models.ReportResponseList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReportsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.ReportResponseList, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetReportsInternalServerErrorCode is the HTTP code returned for type GetReportsInternalServerError
const GetReportsInternalServerErrorCode int = 500

/*GetReportsInternalServerError Internal Server Error

swagger:response getReportsInternalServerError
*/
type GetReportsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetReportsInternalServerError creates GetReportsInternalServerError with default headers values
func NewGetReportsInternalServerError() *GetReportsInternalServerError {

	return &GetReportsInternalServerError{}
}

// WithPayload adds the payload to the get reports internal server error response
func (o *GetReportsInternalServerError) WithPayload(payload *models.Error) *GetReportsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get reports internal server error response
func (o *GetReportsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReportsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
