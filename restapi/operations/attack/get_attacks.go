// Code generated by go-swagger; DO NOT EDIT.

package attack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAttacksHandlerFunc turns a function with the right signature into a get attacks handler
type GetAttacksHandlerFunc func(GetAttacksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAttacksHandlerFunc) Handle(params GetAttacksParams) middleware.Responder {
	return fn(params)
}

// GetAttacksHandler interface for that can handle valid get attacks params
type GetAttacksHandler interface {
	Handle(GetAttacksParams) middleware.Responder
}

// NewGetAttacks creates a new http.Handler for the get attacks operation
func NewGetAttacks(ctx *middleware.Context, handler GetAttacksHandler) *GetAttacks {
	return &GetAttacks{Context: ctx, Handler: handler}
}

/*GetAttacks swagger:route GET /attack attack getAttacks

Get a list of all attack details

*/
type GetAttacks struct {
	Context *middleware.Context
	Handler GetAttacksHandler
}

func (o *GetAttacks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAttacksParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
